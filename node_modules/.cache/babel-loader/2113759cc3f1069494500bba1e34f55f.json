{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moniv\\\\OneDrive\\\\Desktop\\\\finalFront3\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContextGlobal = /*#__PURE__*/createContext();\n\nconst reducerFunction = (state, _ref) => {\n  let {\n    type\n  } = _ref;\n\n  switch (type) {\n    case \"dark\":\n      return {\n        bgFlag: \"light\",\n        bgColor: \"#fff\"\n      };\n\n    case \"light\":\n      return {\n        bgFlag: \"dark\",\n        bgColor: \"#121212\"\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const ContextProvider = _ref2 => {\n  _s();\n\n  let {\n    children\n  } = _ref2;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const initalState = {\n    bgFlag: \"dark\",\n    bgColor: \"#fff\"\n  };\n  const [state, dispatch] = useReducer(reducerFunction, initalState);\n  const data = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: data,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"MfeFq/YeXq1laAm5Bb2FPVG97dI=\");\n\n_c = ContextProvider;\nexport default ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useReducer","ContextGlobal","reducerFunction","state","type","bgFlag","bgColor","ContextProvider","children","initalState","dispatch","data"],"sources":["C:/Users/moniv/OneDrive/Desktop/finalFront3/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useReducer } from \"react\";\r\n\r\n\r\nexport const ContextGlobal = createContext();\r\n\r\nconst reducerFunction = (state, { type }) => {\r\n\r\n  switch (type) {\r\n    case \"dark\":\r\n      return {\r\n        bgFlag: \"light\",\r\n        bgColor: \"#fff\",\r\n      }\r\n    case \"light\":\r\n      return {\r\n        bgFlag: \"dark\",\r\n        bgColor: \"#121212\"\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n}\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n\r\n  const initalState = { bgFlag: \"dark\", bgColor: \"#fff\" }\r\n  const [state, dispatch] = useReducer(reducerFunction, initalState);\r\n\r\n  const data = {\r\n    state,\r\n    dispatch,\r\n  };\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={ data }>      \r\n        {children}      \r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n\r\nexport default ContextProvider;\r\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;;AAGA,OAAO,MAAMC,aAAa,gBAAGF,aAAa,EAAnC;;AAEP,MAAMG,eAAe,GAAG,CAACC,KAAD,WAAqB;EAAA,IAAb;IAAEC;EAAF,CAAa;;EAE3C,QAAQA,IAAR;IACE,KAAK,MAAL;MACE,OAAO;QACLC,MAAM,EAAE,OADH;QAELC,OAAO,EAAE;MAFJ,CAAP;;IAIF,KAAK,OAAL;MACE,OAAO;QACLD,MAAM,EAAE,MADH;QAELC,OAAO,EAAE;MAFJ,CAAP;;IAIF;MACE,OAAOH,KAAP;EAZJ;AAeD,CAjBD;;AAmBA,OAAO,MAAMI,eAAe,GAAG,SAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EAEA,MAAMC,WAAW,GAAG;IAAEJ,MAAM,EAAE,MAAV;IAAkBC,OAAO,EAAE;EAA3B,CAApB;EACA,MAAM,CAACH,KAAD,EAAQO,QAAR,IAAoBV,UAAU,CAACE,eAAD,EAAkBO,WAAlB,CAApC;EAEA,MAAME,IAAI,GAAG;IACXR,KADW;IAEXO;EAFW,CAAb;EAKA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAGC,IAAhC;IAAA,UACKH;EADL;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAhBM;;GAAMD,e;;KAAAA,e;AAkBb,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}