{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moniv\\\\OneDrive\\\\Desktop\\\\finalFront3\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\";\nimport { useReducer, useState } from \"react\";\nimport { createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContextGlobal = /*#__PURE__*/createContext(); // const reducerFunction = (state, { type }) => {\n//   switch (type) {\n//     case \"dark\":\n//       return { bgFlag: \"LIGHT\",\n//       bgColor: \"#393944\",\n//       ftColor: \"#eee\"};\n//     case \"light\":\n//       return { bgFlag: \"DARK\",\n//       ftColor: \"#393944\",\n//       bgColor: \"#eee\" };\n//     default:\n//       return state;\n//   }\n// };\n\nexport const ContextProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {},\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_c = ContextProvider;\nexport default ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["useReducer","useState","createContext","ContextGlobal","ContextProvider","children"],"sources":["C:/Users/moniv/OneDrive/Desktop/finalFront3/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { useReducer, useState } from \"react\";\r\nimport { createContext } from \"react\";\r\n\r\n\r\nexport const ContextGlobal = createContext();\r\n\r\n// const reducerFunction = (state, { type }) => {\r\n//   switch (type) {\r\n//     case \"dark\":\r\n//       return { bgFlag: \"LIGHT\",\r\n//       bgColor: \"#393944\",\r\n//       ftColor: \"#eee\"};\r\n//     case \"light\":\r\n//       return { bgFlag: \"DARK\",\r\n//       ftColor: \"#393944\",\r\n//       bgColor: \"#eee\" };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n\r\n  \r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{  }}>\r\n      <div>{children}</div>\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n\r\nexport default ContextProvider;\r\n"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,SAASC,aAAT,QAA8B,OAA9B;;AAGA,OAAO,MAAMC,aAAa,gBAAGD,aAAa,EAAnC,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,eAAe,GAAG,QAAkB;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EAIA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE,EAA/B;IAAA,uBACE;MAAA,UAAMA;IAAN;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAVM;KAAMD,e;AAYb,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}